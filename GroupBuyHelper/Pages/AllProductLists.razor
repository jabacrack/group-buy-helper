@page "/alllists"
@attribute [Authorize]
@using GroupBuyHelper.Services
@using Microsoft.EntityFrameworkCore.Infrastructure
@using GroupBuyHelper.Dtos
@using GroupBuyHelper.Data
@inject ProductService productService
@inject IUserService userService

<h3>Все заказы</h3>

@if (isDeleteDialogVisible)
{
<div class="modal" tabindex="-1" style="display: block">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Delete order</h5>
                    <button type="button" class="btn-close" data-dismiss="modal" @onclick="CloseDeleteDialog" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Вы действительно хотите удалить "@deletingListName" и все пользовательские заказы? Их нельзя будет восстановить.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Удалить</button>
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeleteDialog">Отмена</button>
                </div>
            </div>
        </div>
    </div>
}

@* <div class="modal" tabindex="-1" style="display:block" role="dialog"> *@
@*     <div class="modal-dialog"> *@
@*         <div class="modal-content"> *@
@*             <div class="modal-header"> *@
@*                 <h3 class="modal-title">Edit Forecast</h3> *@
@*                 <!-- Button to close the popup --> *@
@*                 <button type="button" class="close"> *@
@*                     <span aria-hidden="true">X</span> *@
@*                 </button> *@
@*             </div> *@
@*             <div class="modal-body"> *@
@*                 $1$ <input class="form-control" type="text" #1# *@
@*                 $1$        placeholder="Celsius forecast" #1# *@
@*                 $1$        @bind="objWeatherForecast.TemperatureC" /> #1# *@
@*                 $1$ <input class="form-control" type="text" #1# *@
@*                 $1$        placeholder="Fahrenheit forecast" #1# *@
@*                 $1$        @bind="objWeatherForecast.TemperatureF" /> #1# *@
@*                 $1$ <input class="form-control" type="text" #1# *@
@*                 $1$        placeholder="Summary" #1# *@
@*                 $1$        @bind="objWeatherForecast.Summary" /> #1# *@
@*                 $1$ <br /> #1# *@
@*                 $1$ <!-- Button to save the forecast --> #1# *@
@*                 $1$ <button class="btn btn-primary" #1# *@
@*                 $1$         @onclick="SaveForecast"> #1# *@
@*                 $1$     Save #1# *@
@*                 $1$ </button> #1# *@
@*             </div> *@
@*         </div> *@
@*     </div> *@
@* </div> *@


<div class="d-flex flex-column">
    @foreach (var list in lists)
    {
        var link = $"list/{list.Id}";
        var linkTotal = $"list/{list.Id}/total";
    <div class="d-flex flex-row border">
        <NavLink class="nav-link" href="@link">
            @list.Name
        </NavLink>

        <NavLink class="nav-link" href="@linkTotal">
            Общее количество
        </NavLink>

        @if (list.OwnerId == currentUserId)
        {
            <button class="btn btn-danger btn-sm" @onclick="() => DeleteList(list.Id, list.Name)"><span aria-hidden="true">&times;</span></button>
        }
    </div>
    }
</div>

@code {

    private ProductListInfo[] lists;
    private string currentUserId;
    bool isDeleteDialogVisible = false;
    int deletingListId = -1;
    string deletingListName = "";

    protected override async Task OnInitializedAsync()
    {
        var currentUser = await userService.GetCurrentUser();
        currentUserId = currentUser.Id;
        await UpdateLists();
    }

    async Task UpdateLists()
    {
        lists = await productService.GetAllProductLists();
    }

    //TODO all this is awful make component for dialog
    void DeleteList(int listId, string listName)
    {
        deletingListName = listName;
        deletingListId = listId;
        ShowDeleteDialog();
    }

    void ShowDeleteDialog()
    {
        isDeleteDialogVisible = true;
    }

    void CloseDeleteDialog()
    {
        isDeleteDialogVisible = false;
        ResetDialogStatus();
    }

    async Task ConfirmDelete()
    {
        await productService.DeleteList(deletingListId);
        CloseDeleteDialog();
        await UpdateLists();
    }

    void ResetDialogStatus()
    {
        deletingListId = -1;
        deletingListName = "";
    }
}
